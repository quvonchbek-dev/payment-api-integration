from django.db import models


class User(models.Model):
    users = models.Manager()
    name = models.CharField(verbose_name="–ü–æ–ª–Ω–æ–µ –∏–º—è", null=True, blank=True, max_length=200)
    username = models.CharField(verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", null=True, blank=True, max_length=200)
    telegram_id = models.BigIntegerField(verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã", unique=True)
    tel_number = models.CharField(verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", max_length=20, null=True, blank=True)
    status = models.CharField(verbose_name="–ü–æ–∑–∏—Ü–∏—è",
                              choices=(
                                  ('maxsus', '‚úÖ –°–ø–µ—Ü. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), ("new_maxsus", '‚úÖ –í–æ—Å—Å—Ç. –°–ø–µ—Ü. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                                  ('student', 'üë®‚Äçüè´ –°—Ç—É–¥–µ–Ω—Ç'), ('new_student', 'üë®‚Äçüè´ –í–æ—Å—Å—Ç. –°—Ç—É–¥–µ–Ω—Ç'),
                                  ('graduate', 'üë®‚Äçüéì –°—Ç–∞—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã'),
                                  ('new_graduate', 'üë®‚Äçüéì –í–æ—Å—Å—Ç. –°—Ç–∞—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã')),
                              max_length=100,
                              null=True, blank=True)
    kod = models.CharField(verbose_name="–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É", max_length=15, null=True, blank=True)
    my_kod = models.CharField(verbose_name="–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", max_length=15, null=True, blank=True)
    isadmin = models.BooleanField(verbose_name='–ê–¥–º–∏–Ω', default=False)
    lang = models.CharField(verbose_name="–Ø–∑—ã–∫ –±–æ—Ç–∞", choices=(('uz', '—É–∑–±–µ–∫—Å–∫–∏–π'), ('ru', '–†—É—Å—Å–∫–∏–π')), default='uz',
                            max_length=100, null=True, blank=True)
    start_data = models.DateTimeField(verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", auto_now_add=True, null=True, blank=True)
    balans1_avto = models.FloatField(verbose_name="–ê–≤—Ç–æ–†–∞—Å—Å—ã–ª–∫–∏ –±–∞–ª–∞–Ω—Å–∞", default=0, null=True, blank=True)
    balans2_yuk = models.FloatField(verbose_name="–ë–∞–ª–∞–Ω—Å –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–∞", default=0, null=True, blank=True)
    balans_ikkalasi = models.FloatField(verbose_name="–ë–∞–ª–∞–Ω—Å –ê–≤—Ç–æ–†–∞—Å—Å—ã–ª–∫–∏ –∏ –ü–æ–∏—Å–∫–∏ –≥—Ä—É–∑–∞", default=0, null=True,
                                        blank=True)
    valyuta = models.CharField(verbose_name="–í–∞–ª—é—Ç–∞", max_length=100, default='UZS', null=True, blank=True)
    podpiski1 = models.DateTimeField(verbose_name="\"–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\" –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski1_end = models.DateTimeField(verbose_name="\"–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\" –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski2 = models.DateTimeField(verbose_name="\"–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞\" –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski2_end = models.DateTimeField(verbose_name="\"–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞\" –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    tolov_avto_yuk = models.CharField(verbose_name="–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª", max_length=100, null=True, blank=True,
                                      editable=False)
    oxirgi_price = models.FloatField(verbose_name="–°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞", default=0, null=True, blank=True,
                                     editable=False)
    send_group_link = models.CharField(verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', max_length=100, null=True,
                                       blank=True)

    def __str__(self):
        return f"{self.name}"

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"


class Tarif(models.Model):
    turi = models.CharField(verbose_name="–¢–∏–ø –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
                            choices=(('avtorassilka', '–ê–≤—Ç–æ–†–∞—Å—Å—ã–ª–∫–∏'),
                                     ('poiskgruzov', '–ü–æ–∏—Å–∫–∏ –≥—Ä—É–∑–æ–≤'),
                                     ('ikkalasi', '–û–±–∞ –∏–∑ –Ω–∏—Ö')),
                            max_length=30,
                            null=True, blank=True)
    month = models.CharField(verbose_name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π",
                             choices=(('3', '3 –¥–µ–Ω—å'), ('5', '5 –¥–µ–Ω—å'),
                                      ('7', '7 –¥–µ–Ω—å'), ('15', '15 –¥–µ–Ω—å'),
                                      ('30', '1 –º–µ—Å—è—Ü'), ('60', '2 –º–µ—Å—è—Ü'),
                                      ('90', '3 –º–µ—Å—è—Ü'), ('120', '4 –º–µ—Å—è—Ü'),
                                      ('150', '5 –º–µ—Å—è—Ü'), ('180', '6 –º–µ—Å—è—Ü'),
                                      ('210', '7 –º–µ—Å—è—Ü'), ('240', '8 –º–µ—Å—è—Ü'),
                                      ('270', '9 –º–µ—Å—è—Ü'), ('300', '10 –º–µ—Å—è—Ü'),
                                      ('330', '11 –º–µ—Å—è—Ü'), ('360', '1 –≥–æ–¥'),
                                      ('720', '2 –≥–æ–¥')),
                             max_length=30, null=True, blank=True)
    price = models.IntegerField(verbose_name='–¶–µ–Ω–∞ (–≤ —Å—É–º–∞—Ö)', default=0, null=True, blank=True)
    chegirma = models.CharField(verbose_name="–°–∫–∏–¥–∫–∞", max_length=20, null=True, blank=True)

    class Meta:
        verbose_name = "–¢–∞—Ä–∏—Ñ"
        verbose_name_plural = "–¢–∞—Ä–∏—Ñ—ã"

    def __str__(self):
        return f"{self.month}"


class Order(models.Model):
    class Status(models.IntegerChoices):
        WAITING = 0
        PAID = 1
        CANCELLED = 2
        EXPIRED = 3

    class OrderTypes(models.IntegerChoices):
        AUTOSEND = 0
        SEARCH = 1
        ALL = 2

    class PaymentAppType(models.TextChoices):
        NONE = "none"
        UZUM = "uzum"
        CLICK = "click"
        PAYME = "payme"

    owner = models.ForeignKey(User, related_name="orders", on_delete=models.CASCADE)
    status = models.IntegerField(choices=Status.choices, default=Status.WAITING)
    amount = models.BigIntegerField()
    payment_for = models.IntegerField(choices=OrderTypes.choices, default=OrderTypes.ALL)
    tariff = models.ForeignKey(Tarif, on_delete=models.SET_NULL, related_name="tariff_payments", blank=True,
                               null=True, default=None)
    created_at = models.DateTimeField(editable=True, auto_now_add=True, null=True)
    payment_app = models.CharField(max_length=10, choices=PaymentAppType.choices, default=PaymentAppType.NONE)

    def __str__(self):
        return f"{self.id}. {self.owner.name} - {self.amount} so'm"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)


class Payment(models.Model):
    order = models.ForeignKey(Order, models.CASCADE, 'payments')
    transactionId = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "Uzum"
        verbose_name_plural = "Uzum"

    def __str__(self):
        return f"{self.order.owner.name} - {self.order.amount} sum"


class ClickPayment(models.Model):
    class ActionTypes(models.IntegerChoices):
        PREPARING = 0
        COMPLETE = 1

    order = models.ForeignKey(Order, models.CASCADE, 'click_payment')
    transactionId = models.BigIntegerField()
    action = models.IntegerField(choices=ActionTypes.choices, default=0)
    sign_time = models.DateTimeField()

    @property
    def status(self):
        return ["Waiting", "Paid", "Cancelled", "Expired"][self.order.status]

    def __str__(self):
        return f"{self.order.id} | {self.order.owner.name} | {self.order.amount}"

    class Meta:
        verbose_name = "Click"
        verbose_name_plural = "Click"


class PayMeTransaction(models.Model):
    transaction_id = models.CharField(max_length=100)
    order = models.ForeignKey(Order, models.CASCADE, related_name='payme_transactions')
    time = models.DateTimeField()
    create_time = models.DateTimeField(auto_now_add=True)
    perform_time = models.DateTimeField(null=True, blank=True)
    cancel_time = models.DateTimeField(null=True, blank=True)

    class Meta:
        verbose_name = "PayMe"
        verbose_name_plural = "PayMe"
