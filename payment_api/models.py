from django.db import models



class User(models.Model):
    users = models.Manager()
    name = models.CharField(verbose_name="–ü–æ–ª–Ω–æ–µ –∏–º—è", null=True, blank=True, max_length=100)
    username = models.CharField(verbose_name="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", null=True, blank=True, max_length=200, unique=True)
    telegram_id = models.BigIntegerField(verbose_name="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º–º—ã", unique=True)
    tel_number = models.CharField(verbose_name="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", max_length=20, null=True, blank=True)
    status = models.CharField(verbose_name="–ü–æ–∑–∏—Ü–∏—è",
                              choices=(
                                  ('maxsus', '‚úÖ –°–ø–µ—Ü. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'), ("new_maxsus", '‚úÖ –í–æ—Å—Å—Ç. –°–ø–µ—Ü. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'),
                                  ('student', 'üë®‚Äçüè´ –°—Ç—É–¥–µ–Ω—Ç'), ('new_student', 'üë®‚Äçüè´ –í–æ—Å—Å—Ç. –°—Ç—É–¥–µ–Ω—Ç'),
                                  ('graduate', 'üë®‚Äçüéì –°—Ç–∞—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã'),
                                  ('new_graduate', 'üë®‚Äçüéì –í–æ—Å—Å—Ç. –°—Ç–∞—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã')),
                              max_length=30,
                              null=True, blank=True)
    kod = models.CharField(verbose_name="–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É", max_length=15, null=True, blank=True)
    my_kod = models.CharField(verbose_name="–ö–æ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", max_length=15, null=True, blank=True)
    isadmin = models.BooleanField(verbose_name='–ê–¥–º–∏–Ω', default=False)
    lang = models.CharField(verbose_name="–Ø–∑—ã–∫ –±–æ—Ç–∞", choices=(('uz', '—É–∑–±–µ–∫—Å–∫–∏–π'), ('ru', '–†—É—Å—Å–∫–∏–π')), default='uz',
                            max_length=100, null=True, blank=True)
    start_data = models.DateTimeField(verbose_name="–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", auto_now_add=True, null=True, blank=True)
    balans1_avto = models.FloatField(verbose_name="–ê–≤—Ç–æ–†–∞—Å—Å—ã–ª–∫–∏ –±–∞–ª–∞–Ω—Å–∞", default=0, null=True, blank=True)
    balans2_yuk = models.FloatField(verbose_name="–ë–∞–ª–∞–Ω—Å –ø–æ–∏—Å–∫–∞ –≥—Ä—É–∑–∞", default=0, null=True, blank=True)
    balans_ikkalasi = models.FloatField(verbose_name="–ë–∞–ª–∞–Ω—Å –ê–≤—Ç–æ–†–∞—Å—Å—ã–ª–∫–∏ –∏ –ü–æ–∏—Å–∫–∏ –≥—Ä—É–∑–∞", default=0, null=True,
                                        blank=True)
    valyuta = models.CharField(verbose_name="–í–∞–ª—é—Ç–∞", max_length=100, default='UZS', null=True, blank=True)
    podpiski1 = models.DateTimeField(verbose_name="\"–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\" –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski1_end = models.DateTimeField(verbose_name="\"–ê–≤—Ç–æ–æ—Ç–ø—Ä–∞–≤–∫—É\" –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski2 = models.DateTimeField(verbose_name="\"–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞\" –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    podpiski2_end = models.DateTimeField(verbose_name="\"–ü–æ–∏—Å–∫ –≥—Ä—É–∑–∞\" –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏", null=True, blank=True)
    tolov_avto_yuk = models.CharField(verbose_name="–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª", max_length=100, null=True, blank=True,
                                      editable=False)
    oxirgi_price = models.FloatField(verbose_name="–°—É–º–º–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞", default=0, null=True, blank=True,
                                     editable=False)

    def __str__(self):
        return f"{self.name}"

    class Meta:
        verbose_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞"
        verbose_name_plural = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞"


class Order(models.Model):
    class Status(models.IntegerChoices):
        WAITING = 0
        USED = 1
        CANCELLED = 2
        EXPIRED = 3

    class OrderTypes(models.IntegerChoices):
        AUTOSEND = 0
        SEARCH = 1
        ALL = 2

    owner = models.ForeignKey(User, related_name="orders", on_delete=models.CASCADE)
    # error = models.CharField(max_length=30, choices=Error.choices, blank=True)
    status = models.IntegerField(choices=Status.choices, default=Status.WAITING)
    amount = models.BigIntegerField()
    payment_for = models.IntegerField(choices=OrderTypes.choices, default=OrderTypes.ALL)
    created_at = models.DateTimeField(editable=True, auto_now_add=True)

    def __str__(self):
        return f"{str(self.id)} - {self.owner.name}"

    def save(self, *args, **kwargs):
        super().save(*args, **kwargs)


class Payment(models.Model):
    order = models.ForeignKey(Order, models.CASCADE, 'payments')
    transactionId = models.CharField(max_length=255)


class ClickTransaction(models.Model):
    click_trans_id = models.BigIntegerField(unique=True)
    service_id = models.IntegerField()
    click_paydoc_id = models.BigIntegerField()
    merchant_trans_id = models.CharField(max_length=255)
    amount = models.FloatField()
    action = models.IntegerField()
    error = models.IntegerField()
    error_note = models.CharField(max_length=255)
    sign_time = models.DateTimeField()
    sign_string = models.CharField(max_length=255)
    merchant_prepare_id = models.IntegerField(null=True, blank=True)
    merchant_confirm_id = models.IntegerField(null=True, blank=True)



    def __str__(self):
        return str(self.click_trans_id)
